{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useRef, useCallback, useEffect, useMemo } from 'react';\nimport { Form } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { useDispatch } from 'react-redux';\nimport useResetSubmitErrors from './useResetSubmitErrors';\nimport sanitizeEmptyValues from './sanitizeEmptyValues';\nimport getFormInitialValues from './getFormInitialValues';\nimport { setAutomaticRefresh } from '../actions/uiActions';\nimport { FormContextProvider } from './FormContextProvider';\nimport submitErrorsMutators from './submitErrorsMutators';\nimport useWarnWhenUnsavedChanges from './useWarnWhenUnsavedChanges';\n/**\n * Wrapper around react-final-form's Form to handle redirection on submit,\n * legacy defaultValue prop, and array inputs.\n *\n * Requires a render function, just like react-final-form\n *\n * @example\n *\n * const SimpleForm = props => (\n *    <FormWithRedirect\n *        {...props}\n *        render={formProps => <SimpleFormView {...formProps} />}\n *    />\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {Object} initialValues\n * @prop {Function} validate\n * @prop {Function} save\n * @prop {boolean} submitOnEnter\n * @prop {string} redirect\n * @prop {boolean} sanitizeEmptyValues\n *\n * @param {Props} props\n */\n\nvar FormWithRedirect = function (_a) {\n  var debug = _a.debug,\n      decorators = _a.decorators,\n      defaultValue = _a.defaultValue,\n      destroyOnUnregister = _a.destroyOnUnregister,\n      form = _a.form,\n      formRootPathname = _a.formRootPathname,\n      initialValues = _a.initialValues,\n      initialValuesEqual = _a.initialValuesEqual,\n      _b = _a.keepDirtyOnReinitialize,\n      keepDirtyOnReinitialize = _b === void 0 ? true : _b,\n      _c = _a.mutators,\n      mutators = _c === void 0 ? defaultMutators : _c,\n      record = _a.record,\n      render = _a.render,\n      save = _a.save,\n      saving = _a.saving,\n      _d = _a.subscription,\n      subscription = _d === void 0 ? defaultSubscription : _d,\n      validate = _a.validate,\n      validateOnBlur = _a.validateOnBlur,\n      version = _a.version,\n      warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges,\n      _e = _a.sanitizeEmptyValues,\n      shouldSanitizeEmptyValues = _e === void 0 ? true : _e,\n      props = __rest(_a, [\"debug\", \"decorators\", \"defaultValue\", \"destroyOnUnregister\", \"form\", \"formRootPathname\", \"initialValues\", \"initialValuesEqual\", \"keepDirtyOnReinitialize\", \"mutators\", \"record\", \"render\", \"save\", \"saving\", \"subscription\", \"validate\", \"validateOnBlur\", \"version\", \"warnWhenUnsavedChanges\", \"sanitizeEmptyValues\"]);\n\n  var redirect = useRef(props.redirect);\n  var onSave = useRef(save);\n  var formGroups = useRef({});\n  var finalMutators = useMemo(function () {\n    return mutators === defaultMutators ? mutators : __assign(__assign({}, defaultMutators), mutators);\n  }, [mutators]); // We don't use state here for two reasons:\n  // 1. There no way to execute code only after the state has been updated\n  // 2. We don't want the form to rerender when redirect is changed\n\n  var setRedirect = function (newRedirect) {\n    redirect.current = newRedirect;\n  };\n  /**\n   * A form can have several Save buttons. In case the user clicks on\n   * a Save button with a custom onSave handler, then on a second Save button\n   * without custom onSave handler, the user expects the default save\n   * handler (the one of the Form) to be called.\n   * That's why the SaveButton onClick calls setOnSave() with no parameters\n   * if it has no custom onSave, and why this function forces a default to\n   * save.\n   */\n\n\n  var setOnSave = useCallback(function (newOnSave) {\n    typeof newOnSave === 'function' ? onSave.current = newOnSave : onSave.current = save;\n  }, [save]);\n  var formContextValue = useMemo(function () {\n    return {\n      setOnSave: setOnSave,\n      getGroupFields: function (name) {\n        return formGroups.current[name] || [];\n      },\n      registerGroup: function (name) {\n        formGroups.current[name] = formGroups.current[name] || [];\n      },\n      unregisterGroup: function (name) {\n        delete formGroups[name];\n      },\n      registerField: function (source, group) {\n        if (group) {\n          var fields = new Set(formGroups.current[group] || []);\n          fields.add(source);\n          formGroups.current[group] = Array.from(fields);\n        }\n      },\n      unregisterField: function (source, group) {\n        if (group) {\n          if (!formGroups.current[group]) {\n            console.warn(\"Invalid form group \" + group);\n          } else {\n            var fields = new Set(formGroups.current[group]);\n            fields.delete(source);\n            formGroups.current[group] = Array.from(fields);\n          }\n        }\n      }\n    };\n  }, [setOnSave]);\n  var finalInitialValues = useMemo(function () {\n    return getFormInitialValues(initialValues, defaultValue, record);\n  }, [JSON.stringify({\n    initialValues: initialValues,\n    defaultValue: defaultValue,\n    record: record\n  })] // eslint-disable-line\n  );\n\n  var submit = function (values) {\n    var finalRedirect = typeof redirect.current === undefined ? props.redirect : redirect.current;\n\n    if (shouldSanitizeEmptyValues) {\n      var sanitizedValues = sanitizeEmptyValues(finalInitialValues, values);\n      return onSave.current(sanitizedValues, finalRedirect);\n    } else {\n      return onSave.current(values, finalRedirect);\n    }\n  };\n\n  return React.createElement(FormContextProvider, {\n    value: formContextValue\n  }, React.createElement(Form, {\n    key: version + \"_\" + ((record === null || record === void 0 ? void 0 : record.id) || ''),\n    debug: debug,\n    decorators: decorators,\n    destroyOnUnregister: destroyOnUnregister,\n    form: form,\n    initialValues: finalInitialValues,\n    initialValuesEqual: initialValuesEqual,\n    keepDirtyOnReinitialize: keepDirtyOnReinitialize,\n    mutators: finalMutators,\n    onSubmit: submit,\n    subscription: subscription,\n    validate: validate,\n    validateOnBlur: validateOnBlur,\n    render: function (formProps) {\n      return (// @ts-ignore Ignored because of a weird error about the active prop\n        React.createElement(FormView, __assign({}, props, formProps, {\n          key: version + \"_\" + ((record === null || record === void 0 ? void 0 : record.id) || ''),\n          record: record,\n          setRedirect: setRedirect,\n          saving: formProps.submitting || saving,\n          render: render,\n          save: save,\n          warnWhenUnsavedChanges: warnWhenUnsavedChanges,\n          formRootPathname: formRootPathname\n        }))\n      );\n    }\n  }));\n};\n\nvar defaultMutators = __assign(__assign({}, arrayMutators), submitErrorsMutators);\n\nvar defaultSubscription = {\n  submitting: true,\n  pristine: true,\n  valid: true,\n  invalid: true,\n  validating: true\n};\n\nvar FormView = function (_a) {\n  var formRootPathname = _a.formRootPathname,\n      render = _a.render,\n      warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges,\n      setRedirect = _a.setRedirect,\n      props = __rest(_a, [\"formRootPathname\", \"render\", \"warnWhenUnsavedChanges\", \"setRedirect\"]);\n\n  useResetSubmitErrors();\n  useWarnWhenUnsavedChanges(warnWhenUnsavedChanges, formRootPathname);\n  var dispatch = useDispatch();\n  var redirect = props.redirect,\n      handleSubmit = props.handleSubmit,\n      pristine = props.pristine;\n  useEffect(function () {\n    dispatch(setAutomaticRefresh(pristine));\n  }, [dispatch, pristine]);\n  /**\n   * We want to let developers define the redirection target from inside the form,\n   * e.g. in a <SaveButton redirect=\"list\" />.\n   * This callback does two things: handle submit, and change the redirection target.\n   * The actual redirection is done in save(), passed by the main controller.\n   *\n   * If the redirection target doesn't depend on the button clicked, it's a\n   * better option to define it directly on the Form component. In that case,\n   * using handleSubmit() instead of handleSubmitWithRedirect is fine.\n   *\n   * @example\n   *\n   * <Button onClick={() => handleSubmitWithRedirect('edit')}>\n   *     Save and edit\n   * </Button>\n   */\n\n  var handleSubmitWithRedirect = useCallback(function (redirectTo) {\n    if (redirectTo === void 0) {\n      redirectTo = redirect;\n    }\n\n    setRedirect(redirectTo);\n    handleSubmit();\n  }, [setRedirect, redirect, handleSubmit]);\n  return render(__assign(__assign({}, props), {\n    handleSubmitWithRedirect: handleSubmitWithRedirect\n  }));\n};\n\nexport default FormWithRedirect;","map":{"version":3,"sources":["/home/haroldo/cod/PosFullStack/UnidadeTeste/cyberTeste/user-admin/node_modules/ra-core/esm/form/FormWithRedirect.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","useRef","useCallback","useEffect","useMemo","Form","arrayMutators","useDispatch","useResetSubmitErrors","sanitizeEmptyValues","getFormInitialValues","setAutomaticRefresh","FormContextProvider","submitErrorsMutators","useWarnWhenUnsavedChanges","FormWithRedirect","_a","debug","decorators","defaultValue","destroyOnUnregister","form","formRootPathname","initialValues","initialValuesEqual","_b","keepDirtyOnReinitialize","_c","mutators","defaultMutators","record","render","save","saving","_d","subscription","defaultSubscription","validate","validateOnBlur","version","warnWhenUnsavedChanges","_e","shouldSanitizeEmptyValues","props","redirect","onSave","formGroups","finalMutators","setRedirect","newRedirect","current","setOnSave","newOnSave","formContextValue","getGroupFields","name","registerGroup","unregisterGroup","registerField","source","group","fields","Set","add","Array","from","unregisterField","console","warn","delete","finalInitialValues","JSON","stringify","submit","values","finalRedirect","undefined","sanitizedValues","createElement","value","key","id","onSubmit","formProps","FormView","submitting","pristine","valid","invalid","validating","dispatch","handleSubmit","handleSubmitWithRedirect","redirectTo"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { useRef, useCallback, useEffect, useMemo } from 'react';\nimport { Form } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { useDispatch } from 'react-redux';\nimport useResetSubmitErrors from './useResetSubmitErrors';\nimport sanitizeEmptyValues from './sanitizeEmptyValues';\nimport getFormInitialValues from './getFormInitialValues';\nimport { setAutomaticRefresh } from '../actions/uiActions';\nimport { FormContextProvider } from './FormContextProvider';\nimport submitErrorsMutators from './submitErrorsMutators';\nimport useWarnWhenUnsavedChanges from './useWarnWhenUnsavedChanges';\n/**\n * Wrapper around react-final-form's Form to handle redirection on submit,\n * legacy defaultValue prop, and array inputs.\n *\n * Requires a render function, just like react-final-form\n *\n * @example\n *\n * const SimpleForm = props => (\n *    <FormWithRedirect\n *        {...props}\n *        render={formProps => <SimpleFormView {...formProps} />}\n *    />\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {Object} initialValues\n * @prop {Function} validate\n * @prop {Function} save\n * @prop {boolean} submitOnEnter\n * @prop {string} redirect\n * @prop {boolean} sanitizeEmptyValues\n *\n * @param {Props} props\n */\nvar FormWithRedirect = function (_a) {\n    var debug = _a.debug, decorators = _a.decorators, defaultValue = _a.defaultValue, destroyOnUnregister = _a.destroyOnUnregister, form = _a.form, formRootPathname = _a.formRootPathname, initialValues = _a.initialValues, initialValuesEqual = _a.initialValuesEqual, _b = _a.keepDirtyOnReinitialize, keepDirtyOnReinitialize = _b === void 0 ? true : _b, _c = _a.mutators, mutators = _c === void 0 ? defaultMutators : _c, record = _a.record, render = _a.render, save = _a.save, saving = _a.saving, _d = _a.subscription, subscription = _d === void 0 ? defaultSubscription : _d, validate = _a.validate, validateOnBlur = _a.validateOnBlur, version = _a.version, warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges, _e = _a.sanitizeEmptyValues, shouldSanitizeEmptyValues = _e === void 0 ? true : _e, props = __rest(_a, [\"debug\", \"decorators\", \"defaultValue\", \"destroyOnUnregister\", \"form\", \"formRootPathname\", \"initialValues\", \"initialValuesEqual\", \"keepDirtyOnReinitialize\", \"mutators\", \"record\", \"render\", \"save\", \"saving\", \"subscription\", \"validate\", \"validateOnBlur\", \"version\", \"warnWhenUnsavedChanges\", \"sanitizeEmptyValues\"]);\n    var redirect = useRef(props.redirect);\n    var onSave = useRef(save);\n    var formGroups = useRef({});\n    var finalMutators = useMemo(function () {\n        return mutators === defaultMutators\n            ? mutators\n            : __assign(__assign({}, defaultMutators), mutators);\n    }, [mutators]);\n    // We don't use state here for two reasons:\n    // 1. There no way to execute code only after the state has been updated\n    // 2. We don't want the form to rerender when redirect is changed\n    var setRedirect = function (newRedirect) {\n        redirect.current = newRedirect;\n    };\n    /**\n     * A form can have several Save buttons. In case the user clicks on\n     * a Save button with a custom onSave handler, then on a second Save button\n     * without custom onSave handler, the user expects the default save\n     * handler (the one of the Form) to be called.\n     * That's why the SaveButton onClick calls setOnSave() with no parameters\n     * if it has no custom onSave, and why this function forces a default to\n     * save.\n     */\n    var setOnSave = useCallback(function (newOnSave) {\n        typeof newOnSave === 'function'\n            ? (onSave.current = newOnSave)\n            : (onSave.current = save);\n    }, [save]);\n    var formContextValue = useMemo(function () { return ({\n        setOnSave: setOnSave,\n        getGroupFields: function (name) { return formGroups.current[name] || []; },\n        registerGroup: function (name) {\n            formGroups.current[name] = formGroups.current[name] || [];\n        },\n        unregisterGroup: function (name) {\n            delete formGroups[name];\n        },\n        registerField: function (source, group) {\n            if (group) {\n                var fields = new Set(formGroups.current[group] || []);\n                fields.add(source);\n                formGroups.current[group] = Array.from(fields);\n            }\n        },\n        unregisterField: function (source, group) {\n            if (group) {\n                if (!formGroups.current[group]) {\n                    console.warn(\"Invalid form group \" + group);\n                }\n                else {\n                    var fields = new Set(formGroups.current[group]);\n                    fields.delete(source);\n                    formGroups.current[group] = Array.from(fields);\n                }\n            }\n        },\n    }); }, [setOnSave]);\n    var finalInitialValues = useMemo(function () { return getFormInitialValues(initialValues, defaultValue, record); }, [JSON.stringify({ initialValues: initialValues, defaultValue: defaultValue, record: record })] // eslint-disable-line\n    );\n    var submit = function (values) {\n        var finalRedirect = typeof redirect.current === undefined\n            ? props.redirect\n            : redirect.current;\n        if (shouldSanitizeEmptyValues) {\n            var sanitizedValues = sanitizeEmptyValues(finalInitialValues, values);\n            return onSave.current(sanitizedValues, finalRedirect);\n        }\n        else {\n            return onSave.current(values, finalRedirect);\n        }\n    };\n    return (React.createElement(FormContextProvider, { value: formContextValue },\n        React.createElement(Form, { key: version + \"_\" + ((record === null || record === void 0 ? void 0 : record.id) || ''), debug: debug, decorators: decorators, destroyOnUnregister: destroyOnUnregister, form: form, initialValues: finalInitialValues, initialValuesEqual: initialValuesEqual, keepDirtyOnReinitialize: keepDirtyOnReinitialize, mutators: finalMutators, onSubmit: submit, subscription: subscription, validate: validate, validateOnBlur: validateOnBlur, render: function (formProps) { return (\n            // @ts-ignore Ignored because of a weird error about the active prop\n            React.createElement(FormView, __assign({}, props, formProps, { key: version + \"_\" + ((record === null || record === void 0 ? void 0 : record.id) || ''), record: record, setRedirect: setRedirect, saving: formProps.submitting || saving, render: render, save: save, warnWhenUnsavedChanges: warnWhenUnsavedChanges, formRootPathname: formRootPathname }))); } })));\n};\nvar defaultMutators = __assign(__assign({}, arrayMutators), submitErrorsMutators);\nvar defaultSubscription = {\n    submitting: true,\n    pristine: true,\n    valid: true,\n    invalid: true,\n    validating: true,\n};\nvar FormView = function (_a) {\n    var formRootPathname = _a.formRootPathname, render = _a.render, warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges, setRedirect = _a.setRedirect, props = __rest(_a, [\"formRootPathname\", \"render\", \"warnWhenUnsavedChanges\", \"setRedirect\"]);\n    useResetSubmitErrors();\n    useWarnWhenUnsavedChanges(warnWhenUnsavedChanges, formRootPathname);\n    var dispatch = useDispatch();\n    var redirect = props.redirect, handleSubmit = props.handleSubmit, pristine = props.pristine;\n    useEffect(function () {\n        dispatch(setAutomaticRefresh(pristine));\n    }, [dispatch, pristine]);\n    /**\n     * We want to let developers define the redirection target from inside the form,\n     * e.g. in a <SaveButton redirect=\"list\" />.\n     * This callback does two things: handle submit, and change the redirection target.\n     * The actual redirection is done in save(), passed by the main controller.\n     *\n     * If the redirection target doesn't depend on the button clicked, it's a\n     * better option to define it directly on the Form component. In that case,\n     * using handleSubmit() instead of handleSubmitWithRedirect is fine.\n     *\n     * @example\n     *\n     * <Button onClick={() => handleSubmitWithRedirect('edit')}>\n     *     Save and edit\n     * </Button>\n     */\n    var handleSubmitWithRedirect = useCallback(function (redirectTo) {\n        if (redirectTo === void 0) { redirectTo = redirect; }\n        setRedirect(redirectTo);\n        handleSubmit();\n    }, [setRedirect, redirect, handleSubmit]);\n    return render(__assign(__assign({}, props), { handleSubmitWithRedirect: handleSubmitWithRedirect }));\n};\nexport default FormWithRedirect;\n"]},"metadata":{},"sourceType":"module"}